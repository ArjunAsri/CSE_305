			-- Bouncing Bullet Video 
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_SIGNED.all;
LIBRARY lpm;
USE lpm.lpm_components.ALL;

ENTITY Bullet IS
Generic(ADDR_WIDTH: integer := 12; DATA_WIDTH: integer := 1);

   PORT(SIGNAL PB1, PB2, Clock 			: IN std_logic;
	     SIGNAL SW0                     : IN std_logic;
	     SIGNAL pixel_row_Bullet     : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
		  SIGNAL pixel_column_Bullet  : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
		  SIGNAL vert_sync_int           : IN std_logic;  
        SIGNAL Red,Green,Blue 			: OUT STD_LOGIC_VECTOR(3 downto 0));		
END Bullet;

			-- Bouncing Bullet Video 

architecture behavior of Bullet is

			-- Video Display Signals   
SIGNAL reset, Bullet_on, Direction			: std_logic;
--SIGNAL vert_sync_int, horiz_sync_int : std_logic;
SIGNAL Size 								: std_logic_vector(10 DOWNTO 0);  
SIGNAL Bullet_Y_motion 						: std_logic_vector(10 DOWNTO 0);
SIGNAL Bullet_Y_pos, Bullet_X_pos	: std_logic_vector(10 DOWNTO 0);

BEGIN           

Size <= CONV_STD_LOGIC_VECTOR(8,11);
Bullet_Y_pos <= CONV_STD_LOGIC_VECTOR(40,11);

		-- need internal copy of vert_sync to read

		-- Colors for pixel data on video signal
--Red   <=  '1' when (Bullet_on = '1') else '0';		
Red(0)   <=  '1' when (Bullet_on = '1') else '0';
Red(1)   <=  '1' when (Bullet_on = '1') else '0';
Red(2)   <=  '1' when (Bullet_on = '1') else '0';
Red(3)   <=  '1' when (Bullet_on = '1') else '0';
		-- Turn off Green and Blue when displaying Bullet
--Green <=  '0' when (Bullet_on = '1') else '0';
Green(0) <=  '0' when (Bullet_on = '1') else '0';
Green(1) <=  '0' when (Bullet_on = '1') else '0';
Green(2) <=  '0' when (Bullet_on = '1') else '0';
Green(3) <=  '0' when (Bullet_on = '1') else '0';

--Blue  <=  '0' when (Bullet_on = '1') else '0';
Blue(0)  <=  '0' when (Bullet_on = '1') else '0';
Blue(1)  <=  '1' when (Bullet_on = '1') else '0';
Blue(2)  <=  '0' when (Bullet_on = '1') else '0';
Blue(3)  <=  '1' when (Bullet_on = '1') else '0';

RGB_Display: Process (Bullet_X_pos, Bullet_Y_pos, pixel_column_Bullet, pixel_row_Bullet, Size)
BEGIN
			-- Set Bullet_on ='1' to display Bullet
 IF ('0' & Bullet_X_pos <= pixel_column_Bullet + Size) AND
 			-- compare positive numbers only
 	(Bullet_X_pos + Size >= '0' & pixel_column_Bullet) AND
 	('0' & Bullet_Y_pos <= pixel_row_Bullet + Size) AND
 	(Bullet_Y_pos + Size >= '0' & pixel_row_Bullet ) THEN
 		Bullet_on <= '1';
 	ELSE
 		Bullet_on <= '0';
END IF;
END process RGB_Display;


Move_Bullet: process(vert_sync_int)
variable count : STD_LOGIC := '1';
BEGIN
			-- Move Bullet once every vertical sync
	--WAIT UNTIL vert_sync_int'event and vert_sync_int = '1';
--IF  (SW0 = '0') then --(PB1 = '0')and (count = '0') then -- added
	IF (vert_sync_int'event and vert_sync_int = '1') then
			-- Bounce off top or bottom of screen
			IF ('0' & Bullet_Y_pos) >=  CONV_STD_LOGIC_VECTOR(480,11) - Size THEN
				 Bullet_Y_motion <= - CONV_STD_LOGIC_VECTOR(2,11);
			ELSIF Bullet_Y_pos <= Size THEN
				 Bullet_Y_motion <= CONV_STD_LOGIC_VECTOR(2,11);
			END IF;
			-- Compute next Bullet Y position
				Bullet_Y_pos <= Bullet_Y_pos + Bullet_Y_motion;
	END IF;
--ELSIF (SW0 = '1') then -- added (PB1 = '1')
     -- Bullet_X_pos <= Bullet_X_pos;
	--	Count := Not Count;
--END IF;-- added
END process Move_Bullet;

END behavior;